/*
 * EPOS public API
 * **Public API сервиса E-POS**  For mode details refer to: * [ Website ](https://www.e-pos.by) * [API Docs](https://api-epos.hgrosh.by/public/swagger/index.html)
 *
 * The version of the OpenAPI document: v1
 * Contact: support-api@epos.by
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package by.sportliner.lk.integration.epos.hgrosh.internal.api;

import java.util.Objects;
import java.util.Arrays;
import by.sportliner.lk.integration.epos.hgrosh.internal.api.Currency;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * Структура платежа
 */
@JsonPropertyOrder({
  TransactionAmount.JSON_PROPERTY_CURRENCY,
  TransactionAmount.JSON_PROPERTY_AMOUNT,
  TransactionAmount.JSON_PROPERTY_TRANSFER_AMOUNT,
  TransactionAmount.JSON_PROPERTY_BANK_COMISSION,
  TransactionAmount.JSON_PROPERTY_ERIP_COMISSION,
  TransactionAmount.JSON_PROPERTY_AGGREGATOR_COMISSION,
  TransactionAmount.JSON_PROPERTY_RATE
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class TransactionAmount {
  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private Currency currency;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private Double amount;

  public static final String JSON_PROPERTY_TRANSFER_AMOUNT = "transferAmount";
  private JsonNullable<Double> transferAmount = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_BANK_COMISSION = "bankComission";
  private JsonNullable<Double> bankComission = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_ERIP_COMISSION = "eripComission";
  private JsonNullable<Double> eripComission = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_AGGREGATOR_COMISSION = "aggregatorComission";
  private JsonNullable<Double> aggregatorComission = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_RATE = "rate";
  private JsonNullable<Double> rate = JsonNullable.<Double>undefined();

  public TransactionAmount() {
  }

  public TransactionAmount currency(Currency currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Currency getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(Currency currency) {
    this.currency = currency;
  }


  public TransactionAmount amount(Double amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Оплаченная покупателем сумма
   * @return amount
  **/
  @jakarta.annotation.Nullable

  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(Double amount) {
    this.amount = amount;
  }


  public TransactionAmount transferAmount(Double transferAmount) {
    this.transferAmount = JsonNullable.<Double>of(transferAmount);
    
    return this;
  }

   /**
   * Перечисленная ПУ сумма (c учетом вычета)
   * @return transferAmount
  **/
  @jakarta.annotation.Nullable

  @JsonIgnore

  public Double getTransferAmount() {
        return transferAmount.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRANSFER_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getTransferAmount_JsonNullable() {
    return transferAmount;
  }
  
  @JsonProperty(JSON_PROPERTY_TRANSFER_AMOUNT)
  public void setTransferAmount_JsonNullable(JsonNullable<Double> transferAmount) {
    this.transferAmount = transferAmount;
  }

  public void setTransferAmount(Double transferAmount) {
    this.transferAmount = JsonNullable.<Double>of(transferAmount);
  }


  public TransactionAmount bankComission(Double bankComission) {
    this.bankComission = JsonNullable.<Double>of(bankComission);
    
    return this;
  }

   /**
   * Комиссия расчетного агента
   * @return bankComission
  **/
  @jakarta.annotation.Nullable

  @JsonIgnore

  public Double getBankComission() {
        return bankComission.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BANK_COMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getBankComission_JsonNullable() {
    return bankComission;
  }
  
  @JsonProperty(JSON_PROPERTY_BANK_COMISSION)
  public void setBankComission_JsonNullable(JsonNullable<Double> bankComission) {
    this.bankComission = bankComission;
  }

  public void setBankComission(Double bankComission) {
    this.bankComission = JsonNullable.<Double>of(bankComission);
  }


  public TransactionAmount eripComission(Double eripComission) {
    this.eripComission = JsonNullable.<Double>of(eripComission);
    
    return this;
  }

   /**
   * Комиссия ЕРИП
   * @return eripComission
  **/
  @jakarta.annotation.Nullable

  @JsonIgnore

  public Double getEripComission() {
        return eripComission.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ERIP_COMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getEripComission_JsonNullable() {
    return eripComission;
  }
  
  @JsonProperty(JSON_PROPERTY_ERIP_COMISSION)
  public void setEripComission_JsonNullable(JsonNullable<Double> eripComission) {
    this.eripComission = eripComission;
  }

  public void setEripComission(Double eripComission) {
    this.eripComission = JsonNullable.<Double>of(eripComission);
  }


  public TransactionAmount aggregatorComission(Double aggregatorComission) {
    this.aggregatorComission = JsonNullable.<Double>of(aggregatorComission);
    
    return this;
  }

   /**
   * Комиссия агрегатора
   * @return aggregatorComission
  **/
  @jakarta.annotation.Nullable

  @JsonIgnore

  public Double getAggregatorComission() {
        return aggregatorComission.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AGGREGATOR_COMISSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getAggregatorComission_JsonNullable() {
    return aggregatorComission;
  }
  
  @JsonProperty(JSON_PROPERTY_AGGREGATOR_COMISSION)
  public void setAggregatorComission_JsonNullable(JsonNullable<Double> aggregatorComission) {
    this.aggregatorComission = aggregatorComission;
  }

  public void setAggregatorComission(Double aggregatorComission) {
    this.aggregatorComission = JsonNullable.<Double>of(aggregatorComission);
  }


  public TransactionAmount rate(Double rate) {
    this.rate = JsonNullable.<Double>of(rate);
    
    return this;
  }

   /**
   * Курс пересчета
   * @return rate
  **/
  @jakarta.annotation.Nullable

  @JsonIgnore

  public Double getRate() {
        return rate.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getRate_JsonNullable() {
    return rate;
  }
  
  @JsonProperty(JSON_PROPERTY_RATE)
  public void setRate_JsonNullable(JsonNullable<Double> rate) {
    this.rate = rate;
  }

  public void setRate(Double rate) {
    this.rate = JsonNullable.<Double>of(rate);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionAmount transactionAmount = (TransactionAmount) o;
    return Objects.equals(this.currency, transactionAmount.currency) &&
        Objects.equals(this.amount, transactionAmount.amount) &&
        equalsNullable(this.transferAmount, transactionAmount.transferAmount) &&
        equalsNullable(this.bankComission, transactionAmount.bankComission) &&
        equalsNullable(this.eripComission, transactionAmount.eripComission) &&
        equalsNullable(this.aggregatorComission, transactionAmount.aggregatorComission) &&
        equalsNullable(this.rate, transactionAmount.rate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, amount, hashCodeNullable(transferAmount), hashCodeNullable(bankComission), hashCodeNullable(eripComission), hashCodeNullable(aggregatorComission), hashCodeNullable(rate));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionAmount {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    transferAmount: ").append(toIndentedString(transferAmount)).append("\n");
    sb.append("    bankComission: ").append(toIndentedString(bankComission)).append("\n");
    sb.append("    eripComission: ").append(toIndentedString(eripComission)).append("\n");
    sb.append("    aggregatorComission: ").append(toIndentedString(aggregatorComission)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

