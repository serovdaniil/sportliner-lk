/*
 * EPOS public API
 * **Public API сервиса E-POS**  For mode details refer to: * [ Website ](https://www.e-pos.by) * [API Docs](https://api-epos.hgrosh.by/public/swagger/index.html)
 *
 * The version of the OpenAPI document: v1
 * Contact: support-api@epos.by
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package by.sportliner.lk.integration.epos.hgrosh.internal.api;

import java.util.Objects;
import java.util.Arrays;
import by.sportliner.lk.integration.epos.hgrosh.internal.api.Address;
import by.sportliner.lk.integration.epos.hgrosh.internal.api.Contact;
import by.sportliner.lk.integration.epos.hgrosh.internal.api.Phone;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import jakarta.validation.constraints.*;
import jakarta.validation.Valid;

/**
 * Контактная информация компании.
 */
@JsonPropertyOrder({
  BusinessCard.JSON_PROPERTY_POST_ADDRESS,
  BusinessCard.JSON_PROPERTY_PHONES,
  BusinessCard.JSON_PROPERTY_EMAILS,
  BusinessCard.JSON_PROPERTY_CONTACTS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class BusinessCard {
  public static final String JSON_PROPERTY_POST_ADDRESS = "postAddress";
  private Address postAddress;

  public static final String JSON_PROPERTY_PHONES = "phones";
  private JsonNullable<List<Phone>> phones = JsonNullable.<List<Phone>>undefined();

  public static final String JSON_PROPERTY_EMAILS = "emails";
  private JsonNullable<List<String>> emails = JsonNullable.<List<String>>undefined();

  public static final String JSON_PROPERTY_CONTACTS = "contacts";
  private JsonNullable<List<Contact>> contacts = JsonNullable.<List<Contact>>undefined();

  public BusinessCard() {
  }

  public BusinessCard postAddress(Address postAddress) {
    
    this.postAddress = postAddress;
    return this;
  }

   /**
   * Get postAddress
   * @return postAddress
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonProperty(JSON_PROPERTY_POST_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Address getPostAddress() {
    return postAddress;
  }


  @JsonProperty(JSON_PROPERTY_POST_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostAddress(Address postAddress) {
    this.postAddress = postAddress;
  }


  public BusinessCard phones(List<Phone> phones) {
    this.phones = JsonNullable.<List<Phone>>of(phones);
    
    return this;
  }

  public BusinessCard addPhonesItem(Phone phonesItem) {
    if (this.phones == null || !this.phones.isPresent()) {
      this.phones = JsonNullable.<List<Phone>>of(new ArrayList<>());
    }
    try {
      this.phones.get().add(phonesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Контактные телефоны.
   * @return phones
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonIgnore

  public List<Phone> getPhones() {
        return phones.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PHONES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<Phone>> getPhones_JsonNullable() {
    return phones;
  }
  
  @JsonProperty(JSON_PROPERTY_PHONES)
  public void setPhones_JsonNullable(JsonNullable<List<Phone>> phones) {
    this.phones = phones;
  }

  public void setPhones(List<Phone> phones) {
    this.phones = JsonNullable.<List<Phone>>of(phones);
  }


  public BusinessCard emails(List<String> emails) {
    this.emails = JsonNullable.<List<String>>of(emails);
    
    return this;
  }

  public BusinessCard addEmailsItem(String emailsItem) {
    if (this.emails == null || !this.emails.isPresent()) {
      this.emails = JsonNullable.<List<String>>of(new ArrayList<>());
    }
    try {
      this.emails.get().add(emailsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Адреса электронной почты.
   * @return emails
  **/
  @jakarta.annotation.Nullable

  @JsonIgnore

  public List<String> getEmails() {
        return emails.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EMAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<String>> getEmails_JsonNullable() {
    return emails;
  }
  
  @JsonProperty(JSON_PROPERTY_EMAILS)
  public void setEmails_JsonNullable(JsonNullable<List<String>> emails) {
    this.emails = emails;
  }

  public void setEmails(List<String> emails) {
    this.emails = JsonNullable.<List<String>>of(emails);
  }


  public BusinessCard contacts(List<Contact> contacts) {
    this.contacts = JsonNullable.<List<Contact>>of(contacts);
    
    return this;
  }

  public BusinessCard addContactsItem(Contact contactsItem) {
    if (this.contacts == null || !this.contacts.isPresent()) {
      this.contacts = JsonNullable.<List<Contact>>of(new ArrayList<>());
    }
    try {
      this.contacts.get().add(contactsItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Список контактов.
   * @return contacts
  **/
  @jakarta.annotation.Nullable
  @Valid

  @JsonIgnore

  public List<Contact> getContacts() {
        return contacts.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONTACTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<List<Contact>> getContacts_JsonNullable() {
    return contacts;
  }
  
  @JsonProperty(JSON_PROPERTY_CONTACTS)
  public void setContacts_JsonNullable(JsonNullable<List<Contact>> contacts) {
    this.contacts = contacts;
  }

  public void setContacts(List<Contact> contacts) {
    this.contacts = JsonNullable.<List<Contact>>of(contacts);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessCard businessCard = (BusinessCard) o;
    return Objects.equals(this.postAddress, businessCard.postAddress) &&
        equalsNullable(this.phones, businessCard.phones) &&
        equalsNullable(this.emails, businessCard.emails) &&
        equalsNullable(this.contacts, businessCard.contacts);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(postAddress, hashCodeNullable(phones), hashCodeNullable(emails), hashCodeNullable(contacts));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessCard {\n");
    sb.append("    postAddress: ").append(toIndentedString(postAddress)).append("\n");
    sb.append("    phones: ").append(toIndentedString(phones)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

