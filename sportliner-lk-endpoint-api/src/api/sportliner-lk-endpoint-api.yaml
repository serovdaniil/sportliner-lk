openapi: 3.0.3

info:
  title: Sportliner-lk-endpoint-api
  description: Sportliner LK Endpoint API
  version: 1.0.0

servers:
  - url: /sportliner-lk-api
    description: Local server

security:
  - bearerAuth: [ ]

tags:
  - name: auth
    description: Authentication operations
  - name: meta
    description: Base meta services
  - name: account
    description: Current user management services
  - name: users
    description: User operations
  - name: branchOffice
    description: Branch office operations
  - name: attendance
    description: Attendances operations
  - name: analysis
    description: Analysis operations
  - name: catalog
    description: Some common operations

paths:

  /auth/login:
    post:
      tags:
        - auth
      security: [ ]
      operationId: login
      summary: Login into system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthCredentials'
      responses:
        200:
          description: Authentication response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'
        403:
          description: Access forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationError'

  /auth/login/changePassword:
    post:
      tags:
        - auth
      security: [ ]
      operationId: loginWithChangePassword
      summary: Change password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthChangePassword'
      responses:
        200:
          description: Authentication response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Authentication failed
        403:
          description: Authentication refused

  /auth/logout:
    post:
      tags:
        - auth
      #      security: []
      operationId: logout
      summary: Logout from system
      parameters:
        - in: query
          name: automatic
          schema:
            type: boolean
      responses:
        200:
          description: Successfully logged out
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /auth/refresh:
    post:
      tags:
        - auth
      security: [ ]
      operationId: refresh
      summary: Refresh auth token
      responses:
        200:
          description: Response with auth tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /account/profile:
    get:
      tags:
        - account
      operationId: getCurrentUserProfile
      summary: Get current user's profile info
      responses:
        200:
          description: User account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /account/password/change:
    post:
      tags:
        - account
      operationId: changeCurrentUserPassword
      summary: Change password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthChangePassword'
      responses:
        200:
          description: OK
        401:
          description: Invalid credentials
        403:
          description: Access forbidden

  /account/child/{id}:
    get:
      tags:
        - account
      operationId: getChildTargetAccount
      summary: Get child of target user account
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: Child
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChildProfile'
        401:
          description: Invalid credentials
        403:
          description: Access forbidden
    put:
      tags:
        - account
      operationId: updateChildTargetAccount
      summary: Update child of target user account
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChildProfile'
      responses:
        201:
          description: Successfully updated
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /users:
    get:
      tags:
        - users
      operationId: getUsers
      summary: Get users accounts
      parameters:
        - name: criteria
          in: query
          required: true
          style: form
          schema:
            $ref: '#/components/schemas/UserAccountCriteria'
      responses:
        200:
          description: List of user accounts
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserAccountListItem"
        401:
          description: Not authenticated
        403:
          description: Access forbidden
    post:
      tags:
        - users
      operationId: createUser
      summary: Create User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccount'
      responses:
        201:
          description: Successfully created
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /users/{id}:
    get:
      tags:
        - users
      operationId: getUserAccount
      summary: Get user account by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: User account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAccount'
        401:
          description: Not authenticated
        403:
          description: Access forbidden
        404:
          description: Property not found
    put:
      tags:
        - users
      operationId: updateUserAccount
      summary: Update user account by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAccount'
      responses:
        201:
          description: Successfully updated
        401:
          description: Not authenticated
        403:
          description: Access forbidden
    delete:
      tags:
        - users
      operationId: deleteUser
      summary: Delete user by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successfully deleted
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /branchOffices:
    get:
      tags:
        - branchOffice
      operationId: getBranchOffices
      summary: Get branch offices
      responses:
        200:
          description: List of branch offices
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BranchOfficeListItem"
        401:
          description: Not authenticated
        403:
          description: Access forbidden
    post:
      tags:
        - branchOffice
      operationId: createBranchOffice
      summary: Create branch office
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BranchOffice'
      responses:
        201:
          description: Successfully created
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /branchOffices/{id}:
    get:
      tags:
        - branchOffice
      operationId: getBranchOffice
      summary: Get branch office by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: Branch office
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BranchOffice'
        401:
          description: Not authenticated
        403:
          description: Access forbidden
        404:
          description: Property not found
    put:
      tags:
        - branchOffice
      operationId: updateBranchOffice
      summary: Update branch office by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BranchOffice'
      responses:
        201:
          description: Successfully updated
        401:
          description: Not authenticated
        403:
          description: Access forbidden
    delete:
      tags:
        - branchOffice
      operationId: deleteBranchOffice
      summary: Delete branch office by ID
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: Successfully deleted
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /branchOffices/{id}/schedules/{period}:
    get:
      tags:
        - branchOffice
      operationId: getSchedulesForBranchOffice
      summary: Get schedules for branch office
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
        - name: period
          in: path
          schema:
            $ref: '#/components/schemas/YearMonth'
          required: true
      responses:
        200:
          description: Schedules
          content:
            application/json:
              schema:
               description: |-
                 Schedules.

                 Map: date -> times.
               type: object
               additionalProperties:
                 items:
                   $ref: '#/components/schemas/LocalTime'
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /branchOffices/currentTrainer:
    get:
      tags:
        - branchOffice
      operationId: getBranchOfficeOfCurrentTrainer
      summary: Get branch office of current trainer
      responses:
        200:
          description: Branch office
          content:
            application/json:
              schema:
                description: Branch office
                $ref: '#/components/schemas/BranchOfficeItem'
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /branchOffices/{id}/children:
    get:
      tags:
        - branchOffice
      operationId: getChildrenForBranchOffice
      summary: Get children for branch office
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: Children
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ChildInfo'
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /branchOffices/{branchOfficeId}/attendances/{period}:
    get:
      tags:
        - attendance
      operationId: getAttendancesForBranchOffice
      summary: Get attendances for branch office of target period
      parameters:
        - name: branchOfficeId
          in: path
          schema:
            type: string
          required: true
        - name: period
          in: path
          schema:
            $ref: '#/components/schemas/YearMonth'
          required: true
      responses:
        200:
          description: Attendance for children
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ChildAttendance'
        401:
          description: Not authenticated
        403:
          description: Access forbidden
    put:
      tags:
        - attendance
      operationId: saveAttendances
      summary: Save attendance
      parameters:
        - name: branchOfficeId
          in: path
          schema:
            type: string
          required: true
        - name: period
          in: path
          schema:
            $ref: '#/components/schemas/YearMonth'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              items:
                $ref: '#/components/schemas/ChildAttendance'
      responses:
        200:
          description: Successfully saved
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /child/{childId}/attendances:
    get:
      tags:
        - attendance
      operationId: getAttendancesForChild
      summary: Get attendances for child
      parameters:
        - name: childId
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: Attendance for children
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Attendance'
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /availableBranchOffices:
    get:
      tags:
        - catalog
      operationId: getAvailableBranchOffices
      summary: Get branch offices
      responses:
        200:
          description: List of branch offices
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BranchOfficeItem"
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /trainers:
    get:
      tags:
        - catalog
      operationId: getTrainers
      summary: Get trainers
      responses:
        200:
          description: List of trainers
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/UserAccountItem"
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /analysis/{branchOfficeId}/{date}:
    get:
      tags:
        - analysis
      operationId: analysisDayAtBranchOffice
      summary: Analyzing the day at the branch
      parameters:
        - name: branchOfficeId
          in: path
          schema:
            type: string
          required: true
        - name: date
          in: path
          schema:
            $ref: '#/components/schemas/LocalDate'
          required: true
      responses:
        200:
          description: Analysis data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisData'
        401:
          description: Not authenticated
        403:
          description: Access forbidden

  /version:
    get:
      operationId: getVersions
      tags:
        - meta
      security: [ ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Versions'

components:

  securitySchemes:

    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    AuthCredentials:
      type: object
      description: Credentials for authentication
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          format: password

    AuthResponse:
      type: object
      description: Authentication response
      required:
        - sessionTimeout
      properties:
        status:
          type: string
          enum:
            - SUCCESS
            - MUST_CHANGE_PASSWORD
        token:
          $ref: '#/components/schemas/AuthToken'
        info:
          $ref: '#/components/schemas/AuthInfo'
        sessionTimeout:
          type: integer

    AuthInfo:
      type: object
      required:
        - id
        - username
        - firstName
        - lastName
        - authorities
      properties:
        id:
          type: string
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        avatarId:
          type: string
        authorities:
          type: array
          items:
            type: string

    AuthToken:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer

    UserProfile:
      type: object
      description: User account
      required:
        - id
        - username
        - email
        - phone
        - firstName
        - patronymic
        - lastName
      properties:
        id:
          type: string
        username:
          type: string
        email:
          type: string
        phone:
          type: string
        firstName:
          type: string
        patronymic:
          type: string
        lastName:
          type: string
        children:
          description: Children who will attend the classes
          type: array
          items:
            $ref: '#/components/schemas/ChildInfo'

    ChildProfile:
      type: object
      description: Child
      required:
        - id
        - fullName
        - birthday
        - diagnosis
        - tuitionBalance
        - numberClassesPerMonth
      properties:
        id:
          type: string
          readOnly: true
        fullName:
          type: string
        birthdate:
          $ref: '#/components/schemas/LocalDate'
        diagnosis:
          type: string
        tuitionBalance:
          type: integer
        numberClassesPerMonth:
          type: integer
        notes:
          type: string

    AuthChangePassword:
      type: object
      description: Credentials for authentication
      required:
        - username
        - oldPassword
        - newPassword
      properties:
        username:
          type: string
        oldPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password

    UserAccount:
      type: object
      description: User account
      required:
        - id
        - username
        - passwordMustBeChanged
        - role
        - email
        - phone
        - firstName
        - patronymic
        - lastName
        - createTimestamp
        - payAttention
      properties:
        id:
          type: string
          readOnly: true
        username:
          type: string
        password:
          type: string
          writeOnly: true
        passwordMustBeChanged:
          type: boolean
        role:
          $ref: '#/components/schemas/UserRole'
        email:
          type: string
        phone:
          type: string
        firstName:
          type: string
        patronymic:
          type: string
        lastName:
          type: string
        createTimestamp:
          type: string
          format: date-time
          readOnly: true
        updateTimestamp:
          type: string
          format: date-time
          readOnly: true
        loginTimestamp:
          type: string
          format: date-time
          readOnly: true
        payAttention:
          description: Whether attention to the user is required
          type: boolean
        reason:
          description: The reason why attention is required
          type: string
        children:
          description: Children who will attend the classes
          type: array
          items:
            $ref: '#/components/schemas/Child'

    Child:
      type: object
      description: Child
      required:
        - id
        - lastName
        - firstName
        - patronymic
        - birthday
        - diagnosis
        - tuitionBalance
        - numberClassesPerMonth
      properties:
        id:
          type: string
          readOnly: true
        lastName:
          type: string
        branchOffice:
          $ref: '#/components/schemas/BranchOfficeItem'
        firstName:
          type: string
        patronymic:
          type: string
        birthdate:
          $ref: '#/components/schemas/LocalDate'
        diagnosis:
          type: string
        tuitionBalance:
          type: integer
        numberClassesPerMonth:
          type: integer
        notes:
          type: string

    UserAccountListItem:
      type: object
      description: User account
      required:
        - id
        - fullName
        - role
        - email
        - phone
      properties:
        id:
          type: string
          readOnly: true
        username:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        email:
          type: string
        phone:
          type: string
        fullName:
          type: string

    UserAccountItem:
      type: object
      description: User account item
      required:
        - id
        - fullName
      properties:
        id:
          type: string
        fullName:
          type: string

    UserRole:
      type: string
      enum:
        - ADMIN
        - TRAINER
        - PARENT

    UserAccountCriteria:
      type: object
      properties:
        lastName:
          type: string
        role:
          $ref: '#/components/schemas/UserRole'
        payAttention:
          type: boolean

    BranchOfficeListItem:
      type: object
      description: Branch office list item
      required:
        - id
        - name
        - address
      properties:
        id:
          type: string
          readOnly: true
        name:
          type: string
        address:
          type: string

    BranchOfficeItem:
      type: object
      description: Branch office item
      required:
        - id
        - address
      properties:
        id:
          type: string
        address:
          type: string

    BranchOffice:
      type: object
      description: Branch office
      required:
        - id
        - name
        - address
      properties:
        id:
          type: string
          readOnly: true
        name:
          description: Name
          type: string
        address:
          description: Address
          $ref: '#/components/schemas/BranchOfficeAddress'
        classSchedules:
          description: Class schedules
          type: array
          items:
            $ref: '#/components/schemas/ClassSchedule'

    BranchOfficeAddress:
      type: object
      description: Branch office address
      required:
        - city
        - street
        - buildingNumber
      properties:
        city:
          type: string
        street:
          type: string
        buildingNumber:
          type: string

    ClassSchedule:
      type: object
      description: Class schedule
      required:
        - day
        - time
        - trainer
        - ageType
      properties:
        id:
          type: string
          readOnly: true
        day:
          description: Day
          $ref: '#/components/schemas/DayOfWeek'
        time:
          description: Time
          $ref: '#/components/schemas/LocalTime'
        trainer:
          description: Trainer
          $ref: '#/components/schemas/UserAccountItem'

    ChildInfo:
      type: object
      description: Child attendance
      required:
        - id
        - fullName
      properties:
        id:
          description: ID
          type: string
        fullName:
          description: fullName
          type: string

    ChildAttendance:
      type: object
      description: Child attendance
      required:
        - childId
        - attendances
      properties:
        childId:
          description: Child ID
          type: string
        attendances:
          description: Attendances
          items:
            $ref: '#/components/schemas/Attendance'

    Attendance:
      type: object
      description: Child attendance
      required:
        - date
        - time
      properties:
        date:
          description: Date
          $ref: '#/components/schemas/LocalDate'
        time:
          description: Time
          $ref: '#/components/schemas/LocalTime'

    AnalysisData:
      type: object
      description: Analysis data
      required:
        - averageAttendance
        - attendanceByTime
      properties:
        averageAttendance:
          description: Average attendance
          type: number
        attendanceByTime:
          description: Attendance by time
          additionalProperties:
            type: integer

    DayOfWeek:
      description: Day of week
      type: string
      enum:
        - MONDAY
        - TUESDAY
        - WEDNESDAY
        - THURSDAY
        - FRIDAY
        - SATURDAY
        - SUNDAY

    LocalTime:
      type: string
      description: Time
      format: LocalTime
      example: 16:45:00

    LocalDate:
      type: string
      description: |
        A date without a time-zone in the ISO-8601 calendar system.
      format: LocalDate
      example: 2022-10-25

    YearMonth:
      type: string
      description: |
        A year-month in the ISO-8601 calendar system.
      format: YearMonth
      example: 2021-05

    Versions:
      type: object
      description: Details about system versions
      properties:
        version:
          description: Application version
          type: string

    BaseError:
      type: object
      required:
        - message
        - type
      properties:
        message:
          type: string
        type:
          $ref: '#/components/schemas/BaseErrorType'
      discriminator:
        propertyName: type
        mapping:
          AUTHENTICATION: '#/components/schemas/AuthenticationError'
          UNIQUENESS_VIOLATION: '#/components/schemas/UniquenessViolationError'
          REFERENCE_VIOLATION: '#/components/schemas/ReferenceViolationError'
          DATA_VALIDATION: '#/components/schemas/DataValidationError'
          OBJECT_NOT_FOUND: '#/components/schemas/ObjectNotFoundError'
          CLIENT_VERSION_REJECTED: '#/components/schemas/ClientVersionRejectedError'
          INTEGRATION: '#/components/schemas/IntegrationError'
          INTERNAL: '#/components/schemas/InternalError'

    BaseErrorType:
      type: string
      enum:
        - AUTHENTICATION
        - UNIQUENESS_VIOLATION
        - REFERENCE_VIOLATION
        - DATA_VALIDATION
        - OBJECT_NOT_FOUND
        - CLIENT_VERSION_REJECTED
        - INTEGRATION
        - INTERNAL

    AuthenticationError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          required:
            - reason
          properties:
            reason:
              type: string
              description: Error reason
              enum:
                - INVALID_CREDENTIALS
                - ACCOUNT_BLOCKED
                - INSUFFICIENT_PRIVILEGES

    UniquenessViolationError:
      allOf:
        - $ref: '#/components/schemas/BaseError'

    ReferenceViolationError:
      allOf:
        - $ref: '#/components/schemas/BaseError'

    DataValidationError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
        - type: object
          properties:
            details:
              type: array
              items:
                $ref: '#/components/schemas/DataValidationErrorItem'

    DataValidationErrorItem:
      type: object
      properties:
        sheet:
          type: string
        cell:
          type: string
        message:
          type: string

    ObjectNotFoundError:
      allOf:
        - $ref: '#/components/schemas/BaseError'

    ClientVersionRejectedError:
      allOf:
        - $ref: '#/components/schemas/BaseError'

    IntegrationError:
      allOf:
        - $ref: '#/components/schemas/BaseError'

    InternalError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
