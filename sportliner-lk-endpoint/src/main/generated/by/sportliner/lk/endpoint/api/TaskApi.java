/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package by.sportliner.lk.endpoint.api;

import by.sportliner.lk.endpoint.api.TaskDto;
import by.sportliner.lk.endpoint.api.TaskStatusDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "task", description = "Task operations")
public interface TaskApi {

    /**
     * POST /task : Create task
     *
     * @param taskDto  (required)
     * @return Successfully created (status code 201)
     *         or Not authenticated (status code 401)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "createTask",
        summary = "Create task",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successfully created"),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "403", description = "Access forbidden")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> createTask(
        @Parameter(name = "TaskDto", description = "", required = true) @Valid @RequestBody TaskDto taskDto
    ) throws Exception;


    /**
     * GET /task : Find all tasks
     *
     * @return Tasks (status code 200)
     *         or Not authenticated (status code 401)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "findAll",
        summary = "Find all tasks",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Tasks", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = TaskDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "403", description = "Access forbidden")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task",
        produces = { "application/json" }
    )
    ResponseEntity<List<TaskDto>> findAll(
        
    ) throws Exception;


    /**
     * GET /task/:{id} : Get task by ID
     *
     * @param id  (required)
     * @return Task (status code 200)
     *         or Not authenticated (status code 401)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "getTaskById",
        summary = "Get task by ID",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Task", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TaskDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "403", description = "Access forbidden")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/task/:{id}",
        produces = { "application/json" }
    )
    ResponseEntity<TaskDto> getTaskById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) throws Exception;


    /**
     * POST /task/:{id}/:{status} : Update status task by ID
     *
     * @param id  (required)
     * @param status  (required)
     * @return Successfully updated (status code 200)
     *         or Not authenticated (status code 401)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "updateStatusTaskById",
        summary = "Update status task by ID",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully updated"),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "403", description = "Access forbidden")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/task/:{id}/:{status}"
    )
    ResponseEntity<Void> updateStatusTaskById(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "status", description = "", required = true, in = ParameterIn.PATH) @PathVariable("status") TaskStatusDto status
    ) throws Exception;


    /**
     * PUT /task/:{id} : Update task
     *
     * @param id  (required)
     * @param taskDto  (required)
     * @return Successfully saved (status code 200)
     *         or Not authenticated (status code 401)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "updateTask",
        summary = "Update task",
        tags = { "task" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully saved"),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "403", description = "Access forbidden")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/task/:{id}",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateTask(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "TaskDto", description = "", required = true) @Valid @RequestBody TaskDto taskDto
    ) throws Exception;

}
