package by.sportliner.lk.endpoint.api;

import java.net.URI;
import java.util.Objects;
import by.sportliner.lk.endpoint.api.AuthenticationErrorDto;
import by.sportliner.lk.endpoint.api.BaseErrorTypeDto;
import by.sportliner.lk.endpoint.api.ClientVersionRejectedErrorDto;
import by.sportliner.lk.endpoint.api.DataValidationErrorDto;
import by.sportliner.lk.endpoint.api.IntegrationErrorDto;
import by.sportliner.lk.endpoint.api.InternalErrorDto;
import by.sportliner.lk.endpoint.api.ObjectNotFoundErrorDto;
import by.sportliner.lk.endpoint.api.ReferenceViolationErrorDto;
import by.sportliner.lk.endpoint.api.UniquenessViolationErrorDto;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import jakarta.annotation.Generated;

/**
 * BaseErrorDto
 */

@JsonIgnoreProperties(
  value = "type", // ignore manually set type, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the type to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = AuthenticationErrorDto.class, name = "AUTHENTICATION"),
  @JsonSubTypes.Type(value = AuthenticationErrorDto.class, name = "AuthenticationError"),
  @JsonSubTypes.Type(value = ClientVersionRejectedErrorDto.class, name = "CLIENT_VERSION_REJECTED"),
  @JsonSubTypes.Type(value = ClientVersionRejectedErrorDto.class, name = "ClientVersionRejectedError"),
  @JsonSubTypes.Type(value = DataValidationErrorDto.class, name = "DATA_VALIDATION"),
  @JsonSubTypes.Type(value = DataValidationErrorDto.class, name = "DataValidationError"),
  @JsonSubTypes.Type(value = IntegrationErrorDto.class, name = "INTEGRATION"),
  @JsonSubTypes.Type(value = InternalErrorDto.class, name = "INTERNAL"),
  @JsonSubTypes.Type(value = IntegrationErrorDto.class, name = "IntegrationError"),
  @JsonSubTypes.Type(value = InternalErrorDto.class, name = "InternalError"),
  @JsonSubTypes.Type(value = ObjectNotFoundErrorDto.class, name = "OBJECT_NOT_FOUND"),
  @JsonSubTypes.Type(value = ObjectNotFoundErrorDto.class, name = "ObjectNotFoundError"),
  @JsonSubTypes.Type(value = ReferenceViolationErrorDto.class, name = "REFERENCE_VIOLATION"),
  @JsonSubTypes.Type(value = ReferenceViolationErrorDto.class, name = "ReferenceViolationError"),
  @JsonSubTypes.Type(value = UniquenessViolationErrorDto.class, name = "UNIQUENESS_VIOLATION"),
  @JsonSubTypes.Type(value = UniquenessViolationErrorDto.class, name = "UniquenessViolationError")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
public class BaseErrorDto {

  @JsonProperty("message")
  private String message;

  @JsonProperty("type")
  private BaseErrorTypeDto type;

  public BaseErrorDto message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
  */
  @NotNull 
  @Schema(name = "message", requiredMode = Schema.RequiredMode.REQUIRED)
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public BaseErrorDto type(BaseErrorTypeDto type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
  */
  @NotNull @Valid 
  @Schema(name = "type", requiredMode = Schema.RequiredMode.REQUIRED)
  public BaseErrorTypeDto getType() {
    return type;
  }

  public void setType(BaseErrorTypeDto type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseErrorDto baseError = (BaseErrorDto) o;
    return Objects.equals(this.message, baseError.message) &&
        Objects.equals(this.type, baseError.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseErrorDto {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

