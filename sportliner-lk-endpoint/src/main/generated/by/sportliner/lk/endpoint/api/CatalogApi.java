/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package by.sportliner.lk.endpoint.api;

import by.sportliner.lk.endpoint.api.BranchOfficeItemDto;
import by.sportliner.lk.endpoint.api.UserAccountItemDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "catalog", description = "Some common operations")
public interface CatalogApi {

    /**
     * GET /availableBranchOffices : Get branch offices
     *
     * @return List of branch offices (status code 200)
     *         or Not authenticated (status code 401)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "getAvailableBranchOffices",
        summary = "Get branch offices",
        tags = { "catalog" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of branch offices", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BranchOfficeItemDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "403", description = "Access forbidden")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/availableBranchOffices",
        produces = { "application/json" }
    )
    ResponseEntity<List<BranchOfficeItemDto>> getAvailableBranchOffices(
        
    ) throws Exception;


    /**
     * GET /catalog/employees : Get employees
     *
     * @return List of users (status code 200)
     *         or Not authenticated (status code 401)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "getEmployees",
        summary = "Get employees",
        tags = { "catalog" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of users", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserAccountItemDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "403", description = "Access forbidden")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/catalog/employees",
        produces = { "application/json" }
    )
    ResponseEntity<List<UserAccountItemDto>> getEmployees(
        
    ) throws Exception;


    /**
     * GET /trainers : Get trainers
     *
     * @return List of trainers (status code 200)
     *         or Not authenticated (status code 401)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "getTrainers",
        summary = "Get trainers",
        tags = { "catalog" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of trainers", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = UserAccountItemDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "403", description = "Access forbidden")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/trainers",
        produces = { "application/json" }
    )
    ResponseEntity<List<UserAccountItemDto>> getTrainers(
        
    ) throws Exception;

}
