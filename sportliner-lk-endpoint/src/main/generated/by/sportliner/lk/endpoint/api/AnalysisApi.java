/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package by.sportliner.lk.endpoint.api;

import by.sportliner.lk.endpoint.api.AnalysisDataDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "analysis", description = "Analysis operations")
public interface AnalysisApi {

    /**
     * GET /analysis/{branchOfficeId}/{date} : Analyzing the day at the branch
     *
     * @param branchOfficeId  (required)
     * @param date  (required)
     * @return Analysis data (status code 200)
     *         or Not authenticated (status code 401)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "analysisDayAtBranchOffice",
        summary = "Analyzing the day at the branch",
        tags = { "analysis" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Analysis data", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = AnalysisDataDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "403", description = "Access forbidden")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/analysis/{branchOfficeId}/{date}",
        produces = { "application/json" }
    )
    ResponseEntity<AnalysisDataDto> analysisDayAtBranchOffice(
        @Parameter(name = "branchOfficeId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("branchOfficeId") String branchOfficeId,
        @Parameter(name = "date", description = "", required = true, in = ParameterIn.PATH) @PathVariable("date") java.time.LocalDate date
    ) throws Exception;

}
