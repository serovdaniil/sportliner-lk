/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package by.sportliner.lk.endpoint.api;

import by.sportliner.lk.endpoint.api.BranchOfficeDto;
import by.sportliner.lk.endpoint.api.BranchOfficeListItemDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "branchOffice", description = "Branch office operations")
public interface BranchOfficeApi {

    /**
     * POST /branchOffices : Create branch office
     *
     * @param branchOfficeDto  (required)
     * @return Successfully created (status code 201)
     *         or Not authenticated (status code 401)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "createBranchOffice",
        summary = "Create branch office",
        tags = { "branchOffice" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successfully created"),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "403", description = "Access forbidden")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/branchOffices",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> createBranchOffice(
        @Parameter(name = "BranchOfficeDto", description = "", required = true) @Valid @RequestBody BranchOfficeDto branchOfficeDto
    ) throws Exception;


    /**
     * DELETE /branchOffices/{id} : Delete branch office by ID
     *
     * @param id  (required)
     * @return Successfully deleted (status code 200)
     *         or Not authenticated (status code 401)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "deleteBranchOffice",
        summary = "Delete branch office by ID",
        tags = { "branchOffice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successfully deleted"),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "403", description = "Access forbidden")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/branchOffices/{id}"
    )
    ResponseEntity<Void> deleteBranchOffice(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) throws Exception;


    /**
     * GET /branchOffices/{id} : Get branch office by ID
     *
     * @param id  (required)
     * @return Branch office (status code 200)
     *         or Not authenticated (status code 401)
     *         or Access forbidden (status code 403)
     *         or Property not found (status code 404)
     */
    @Operation(
        operationId = "getBranchOffice",
        summary = "Get branch office by ID",
        tags = { "branchOffice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Branch office", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BranchOfficeDto.class))
            }),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "403", description = "Access forbidden"),
            @ApiResponse(responseCode = "404", description = "Property not found")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/branchOffices/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<BranchOfficeDto> getBranchOffice(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) throws Exception;


    /**
     * GET /branchOffices : Get branch offices
     *
     * @return List of branch offices (status code 200)
     *         or Not authenticated (status code 401)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "getBranchOffices",
        summary = "Get branch offices",
        tags = { "branchOffice" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of branch offices", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = BranchOfficeListItemDto.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "403", description = "Access forbidden")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/branchOffices",
        produces = { "application/json" }
    )
    ResponseEntity<List<BranchOfficeListItemDto>> getBranchOffices(
        
    ) throws Exception;


    /**
     * PUT /branchOffices/{id} : Update branch office by ID
     *
     * @param id  (required)
     * @param branchOfficeDto  (required)
     * @return Successfully updated (status code 201)
     *         or Not authenticated (status code 401)
     *         or Access forbidden (status code 403)
     */
    @Operation(
        operationId = "updateBranchOffice",
        summary = "Update branch office by ID",
        tags = { "branchOffice" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successfully updated"),
            @ApiResponse(responseCode = "401", description = "Not authenticated"),
            @ApiResponse(responseCode = "403", description = "Access forbidden")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/branchOffices/{id}",
        consumes = { "application/json" }
    )
    ResponseEntity<Void> updateBranchOffice(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
        @Parameter(name = "BranchOfficeDto", description = "", required = true) @Valid @RequestBody BranchOfficeDto branchOfficeDto
    ) throws Exception;

}
