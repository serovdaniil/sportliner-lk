/* tslint:disable */
/* eslint-disable */
/**
 * Sportliner-lk-endpoint-api
 * Sportliner LK Endpoint API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BaseErrorType,
    BaseErrorTypeFromJSON,
    BaseErrorTypeFromJSONTyped,
    BaseErrorTypeToJSON,
} from './';

import {
     AuthenticationError,
     AuthenticationErrorToJSON,
     AuthenticationErrorToJSONTyped,
     AuthenticationErrorFromJSONTyped,
     ClientVersionRejectedError,
     ClientVersionRejectedErrorToJSON,
     ClientVersionRejectedErrorToJSONTyped,
     ClientVersionRejectedErrorFromJSONTyped,
     DataValidationError,
     DataValidationErrorToJSON,
     DataValidationErrorToJSONTyped,
     DataValidationErrorFromJSONTyped,
     IntegrationError,
     IntegrationErrorToJSON,
     IntegrationErrorToJSONTyped,
     IntegrationErrorFromJSONTyped,
     InternalError,
     InternalErrorToJSON,
     InternalErrorToJSONTyped,
     InternalErrorFromJSONTyped,
     ObjectNotFoundError,
     ObjectNotFoundErrorToJSON,
     ObjectNotFoundErrorToJSONTyped,
     ObjectNotFoundErrorFromJSONTyped,
     ReferenceViolationError,
     ReferenceViolationErrorToJSON,
     ReferenceViolationErrorToJSONTyped,
     ReferenceViolationErrorFromJSONTyped,
     UniquenessViolationError,
     UniquenessViolationErrorToJSON,
     UniquenessViolationErrorToJSONTyped,
     UniquenessViolationErrorFromJSONTyped
} from './';

/**
 * 
 * @export
 * @interface BaseError
 */
export interface BaseError {
    /**
     * 
     * @type {string}
     * @memberof BaseError
     */
    message: string;
    /**
     * 
     * @type {BaseErrorType}
     * @memberof BaseError
     */
    type: BaseErrorType;
}

export function BaseErrorFromJSON(json: any): BaseError {
    return BaseErrorFromJSONTyped(json, false);
}

export function BaseErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): BaseError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['type'] === 'AUTHENTICATION') {
            return AuthenticationErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'CLIENT_VERSION_REJECTED') {
            return ClientVersionRejectedErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'DATA_VALIDATION') {
            return DataValidationErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'INTEGRATION') {
            return IntegrationErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'INTERNAL') {
            return InternalErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'OBJECT_NOT_FOUND') {
            return ObjectNotFoundErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'REFERENCE_VIOLATION') {
            return ReferenceViolationErrorFromJSONTyped(json, true);
        }
        if (json['type'] === 'UNIQUENESS_VIOLATION') {
            return UniquenessViolationErrorFromJSONTyped(json, true);
        }
    }
    return {
        
        'message': json['message'],
        'type': BaseErrorTypeFromJSON(json['type']),
    };
}

export function BaseErrorToJSON(value?: BaseError | null): any {
    return BaseErrorToJSONTyped(value, false);
}

export function BaseErrorToJSONTyped(value?: BaseError | null, ignoreDiscriminator: boolean = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    if (!ignoreDiscriminator) {
        if (value['type'] === 'AUTHENTICATION') {
            return AuthenticationErrorToJSONTyped(value as AuthenticationError, true);
        }
        if (value['type'] === 'CLIENT_VERSION_REJECTED') {
            return ClientVersionRejectedErrorToJSONTyped(value as ClientVersionRejectedError, true);
        }
        if (value['type'] === 'DATA_VALIDATION') {
            return DataValidationErrorToJSONTyped(value as DataValidationError, true);
        }
        if (value['type'] === 'INTEGRATION') {
            return IntegrationErrorToJSONTyped(value as IntegrationError, true);
        }
        if (value['type'] === 'INTERNAL') {
            return InternalErrorToJSONTyped(value as InternalError, true);
        }
        if (value['type'] === 'OBJECT_NOT_FOUND') {
            return ObjectNotFoundErrorToJSONTyped(value as ObjectNotFoundError, true);
        }
        if (value['type'] === 'REFERENCE_VIOLATION') {
            return ReferenceViolationErrorToJSONTyped(value as ReferenceViolationError, true);
        }
        if (value['type'] === 'UNIQUENESS_VIOLATION') {
            return UniquenessViolationErrorToJSONTyped(value as UniquenessViolationError, true);
        }
    }
    return {
        
        'message': value.message,
        'type': BaseErrorTypeToJSON(value.type),
    };
}

