/* tslint:disable */
/* eslint-disable */
/**
 * Sportliner-lk-endpoint-api
 * Sportliner LK Endpoint API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    UserRole,
    UserRoleFromJSON,
    UserRoleFromJSONTyped,
    UserRoleToJSON,
} from './';


/**
 * User account
 * @export
 * @interface UserAccount
 */
export interface UserAccount {
    /**
     * 
     * @type {string}
     * @memberof UserAccount
     */
    readonly id: string;
    /**
     * 
     * @type {string}
     * @memberof UserAccount
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof UserAccount
     */
    password?: string;
    /**
     * 
     * @type {boolean}
     * @memberof UserAccount
     */
    passwordMustBeChanged: boolean;
    /**
     * 
     * @type {UserRole}
     * @memberof UserAccount
     */
    role: UserRole;
    /**
     * 
     * @type {string}
     * @memberof UserAccount
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserAccount
     */
    phone: string;
    /**
     * 
     * @type {string}
     * @memberof UserAccount
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof UserAccount
     */
    patronymic: string;
    /**
     * 
     * @type {string}
     * @memberof UserAccount
     */
    lastName: string;
    /**
     * 
     * @type {Date}
     * @memberof UserAccount
     */
    readonly createTimestamp: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserAccount
     */
    readonly updateTimestamp?: Date;
    /**
     * 
     * @type {Date}
     * @memberof UserAccount
     */
    readonly loginTimestamp?: Date;
}

export function UserAccountFromJSON(json: any): UserAccount {
    return UserAccountFromJSONTyped(json, false);
}

export function UserAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserAccount {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'username': json['username'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'passwordMustBeChanged': json['passwordMustBeChanged'],
        'role': UserRoleFromJSON(json['role']),
        'email': json['email'],
        'phone': json['phone'],
        'firstName': json['firstName'],
        'patronymic': json['patronymic'],
        'lastName': json['lastName'],
        'createTimestamp': (new Date(json['createTimestamp'])),
        'updateTimestamp': !exists(json, 'updateTimestamp') ? undefined : (new Date(json['updateTimestamp'])),
        'loginTimestamp': !exists(json, 'loginTimestamp') ? undefined : (new Date(json['loginTimestamp'])),
    };
}

export function UserAccountToJSON(value?: UserAccount | null): any {
    return UserAccountToJSONTyped(value, false);
}

export function UserAccountToJSONTyped(value?: UserAccount | null, ignoreDiscriminator: boolean = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'username': value.username,
        'password': value.password,
        'passwordMustBeChanged': value.passwordMustBeChanged,
        'role': UserRoleToJSON(value.role),
        'email': value.email,
        'phone': value.phone,
        'firstName': value.firstName,
        'patronymic': value.patronymic,
        'lastName': value.lastName,
    };
}

