/* tslint:disable */
/* eslint-disable */
/**
 * Sportliner-lk-endpoint-api
 * Sportliner LK Endpoint API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BaseError,
    BaseErrorFromJSON,
    BaseErrorFromJSONTyped,
    BaseErrorToJSON,
    BaseErrorType,
    BaseErrorTypeFromJSON,
    BaseErrorTypeFromJSONTyped,
    BaseErrorTypeToJSON,
} from './';
import { BaseErrorToJSONTyped } from './';

/**
 * 
 * @export
 * @interface AuthenticationError
 */
export interface AuthenticationError extends BaseError {
    /**
     * Error reason
     * @type {string}
     * @memberof AuthenticationError
     */
    reason: AuthenticationErrorReason;
}


/**
 * @export
 */
export const AuthenticationErrorReason = {
    INVALID_CREDENTIALS: 'INVALID_CREDENTIALS',
    ACCOUNT_BLOCKED: 'ACCOUNT_BLOCKED',
    INSUFFICIENT_PRIVILEGES: 'INSUFFICIENT_PRIVILEGES'
} as const;
export type AuthenticationErrorReason = typeof AuthenticationErrorReason[keyof typeof AuthenticationErrorReason];


export function AuthenticationErrorFromJSON(json: any): AuthenticationError {
    return AuthenticationErrorFromJSONTyped(json, false);
}

export function AuthenticationErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticationError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...BaseErrorFromJSONTyped(json, ignoreDiscriminator),
        'reason': json['reason'],
    };
}

export function AuthenticationErrorToJSON(value?: AuthenticationError | null): any {
    return AuthenticationErrorToJSONTyped(value, false);
}

export function AuthenticationErrorToJSONTyped(value?: AuthenticationError | null, ignoreDiscriminator: boolean = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...BaseErrorToJSONTyped(value, ignoreDiscriminator),
        'reason': value.reason,
    };
}

