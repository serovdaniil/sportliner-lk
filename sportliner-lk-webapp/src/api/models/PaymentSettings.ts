/* tslint:disable */
/* eslint-disable */
/**
 * Sportliner-lk-endpoint-api
 * Sportliner LK Endpoint API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PriceItem,
    PriceItemFromJSON,
    PriceItemFromJSONTyped,
    PriceItemToJSON,
} from './';


/**
 * Payment settings
 * @export
 * @interface PaymentSettings
 */
export interface PaymentSettings {
    /**
     * Need to use prev price
     * @type {boolean}
     * @memberof PaymentSettings
     */
    usePrevPrice: boolean;
    /**
     * Current price
     * @type {Array<PriceItem>}
     * @memberof PaymentSettings
     */
    currentPrice: Array<PriceItem>;
    /**
     * Prev price
     * @type {Array<PriceItem>}
     * @memberof PaymentSettings
     */
    prevPrice: Array<PriceItem>;
}

export function PaymentSettingsFromJSON(json: any): PaymentSettings {
    return PaymentSettingsFromJSONTyped(json, false);
}

export function PaymentSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaymentSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'usePrevPrice': json['usePrevPrice'],
        'currentPrice': ((json['currentPrice'] as Array<any>).map(PriceItemFromJSON)),
        'prevPrice': ((json['prevPrice'] as Array<any>).map(PriceItemFromJSON)),
    };
}

export function PaymentSettingsToJSON(value?: PaymentSettings | null): any {
    return PaymentSettingsToJSONTyped(value, false);
}

export function PaymentSettingsToJSONTyped(value?: PaymentSettings | null, ignoreDiscriminator: boolean = false): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'usePrevPrice': value.usePrevPrice,
        'currentPrice': ((value.currentPrice as Array<any>).map(PriceItemToJSON)),
        'prevPrice': ((value.prevPrice as Array<any>).map(PriceItemToJSON)),
    };
}

