/* tslint:disable */
/* eslint-disable */
/**
 * Sportliner-lk-endpoint-api
 * Sportliner LK Endpoint API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Attendance,
  ChildAttendance,
} from '../models';
import {
    AttendanceFromJSON,
    AttendanceToJSON,
    ChildAttendanceFromJSON,
    ChildAttendanceToJSON,
} from '../models';

export interface GetAttendancesForBranchOfficeRequest {
    branchOfficeId: string;
    period: string;
}

export interface GetAttendancesForChildRequest {
    childId: string;
}

export interface SaveAttendancesRequest {
    branchOfficeId: string;
    period: string;
    childAttendance: Array<ChildAttendance>;
}

/**
 * 
 */
export class AttendanceApi extends runtime.BaseAPI {

    /**
     * Get attendances for branch office of target period
     */
    async getAttendancesForBranchOfficeRaw(requestParameters: GetAttendancesForBranchOfficeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ChildAttendance>>> {
        if (requestParameters.branchOfficeId === null || requestParameters.branchOfficeId === undefined) {
            throw new runtime.RequiredError('branchOfficeId','Required parameter requestParameters.branchOfficeId was null or undefined when calling getAttendancesForBranchOffice.');
        }

        if (requestParameters.period === null || requestParameters.period === undefined) {
            throw new runtime.RequiredError('period','Required parameter requestParameters.period was null or undefined when calling getAttendancesForBranchOffice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/branchOffices/{branchOfficeId}/attendances/{period}`.replace(`{${"branchOfficeId"}}`, encodeURIComponent(String(requestParameters.branchOfficeId))).replace(`{${"period"}}`, encodeURIComponent(String(requestParameters.period))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ChildAttendanceFromJSON));
    }

    /**
     * Get attendances for branch office of target period
     */
    async getAttendancesForBranchOffice(requestParameters: GetAttendancesForBranchOfficeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ChildAttendance>> {
        const response = await this.getAttendancesForBranchOfficeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get attendances for child
     */
    async getAttendancesForChildRaw(requestParameters: GetAttendancesForChildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Attendance>>> {
        if (requestParameters.childId === null || requestParameters.childId === undefined) {
            throw new runtime.RequiredError('childId','Required parameter requestParameters.childId was null or undefined when calling getAttendancesForChild.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/child/{childId}/attendances`.replace(`{${"childId"}}`, encodeURIComponent(String(requestParameters.childId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AttendanceFromJSON));
    }

    /**
     * Get attendances for child
     */
    async getAttendancesForChild(requestParameters: GetAttendancesForChildRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Attendance>> {
        const response = await this.getAttendancesForChildRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save attendance
     */
    async saveAttendancesRaw(requestParameters: SaveAttendancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.branchOfficeId === null || requestParameters.branchOfficeId === undefined) {
            throw new runtime.RequiredError('branchOfficeId','Required parameter requestParameters.branchOfficeId was null or undefined when calling saveAttendances.');
        }

        if (requestParameters.period === null || requestParameters.period === undefined) {
            throw new runtime.RequiredError('period','Required parameter requestParameters.period was null or undefined when calling saveAttendances.');
        }

        if (requestParameters.childAttendance === null || requestParameters.childAttendance === undefined) {
            throw new runtime.RequiredError('childAttendance','Required parameter requestParameters.childAttendance was null or undefined when calling saveAttendances.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/branchOffices/{branchOfficeId}/attendances/{period}`.replace(`{${"branchOfficeId"}}`, encodeURIComponent(String(requestParameters.branchOfficeId))).replace(`{${"period"}}`, encodeURIComponent(String(requestParameters.period))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.childAttendance.map(ChildAttendanceToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Save attendance
     */
    async saveAttendances(requestParameters: SaveAttendancesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.saveAttendancesRaw(requestParameters, initOverrides);
    }

}
