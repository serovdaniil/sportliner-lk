/* tslint:disable */
/* eslint-disable */
/**
 * Sportliner-lk-endpoint-api
 * Sportliner LK Endpoint API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AnalysisData,
} from '../models';
import {
    AnalysisDataFromJSON,
    AnalysisDataToJSON,
} from '../models';

export interface AnalysisDayAtBranchOfficeRequest {
    branchOfficeId: string;
    date: string;
}

/**
 * 
 */
export class AnalysisApi extends runtime.BaseAPI {

    /**
     * Analyzing the day at the branch
     */
    async analysisDayAtBranchOfficeRaw(requestParameters: AnalysisDayAtBranchOfficeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AnalysisData>> {
        if (requestParameters.branchOfficeId === null || requestParameters.branchOfficeId === undefined) {
            throw new runtime.RequiredError('branchOfficeId','Required parameter requestParameters.branchOfficeId was null or undefined when calling analysisDayAtBranchOffice.');
        }

        if (requestParameters.date === null || requestParameters.date === undefined) {
            throw new runtime.RequiredError('date','Required parameter requestParameters.date was null or undefined when calling analysisDayAtBranchOffice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/analysis/{branchOfficeId}/{date}`.replace(`{${"branchOfficeId"}}`, encodeURIComponent(String(requestParameters.branchOfficeId))).replace(`{${"date"}}`, encodeURIComponent(String(requestParameters.date))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AnalysisDataFromJSON(jsonValue));
    }

    /**
     * Analyzing the day at the branch
     */
    async analysisDayAtBranchOffice(requestParameters: AnalysisDayAtBranchOfficeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AnalysisData> {
        const response = await this.analysisDayAtBranchOfficeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
