/* tslint:disable */
/* eslint-disable */
/**
 * Sportliner-lk-endpoint-api
 * Sportliner LK Endpoint API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BranchOfficeItem,
  UserAccountItem,
} from '../models';
import {
    BranchOfficeItemFromJSON,
    BranchOfficeItemToJSON,
    UserAccountItemFromJSON,
    UserAccountItemToJSON,
} from '../models';

/**
 * 
 */
export class CatalogApi extends runtime.BaseAPI {

    /**
     * Get branch offices
     */
    async getAvailableBranchOfficesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BranchOfficeItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/availableBranchOffices`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BranchOfficeItemFromJSON));
    }

    /**
     * Get branch offices
     */
    async getAvailableBranchOffices(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BranchOfficeItem>> {
        const response = await this.getAvailableBranchOfficesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get employees
     */
    async getEmployeesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserAccountItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/catalog/employees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserAccountItemFromJSON));
    }

    /**
     * Get employees
     */
    async getEmployees(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserAccountItem>> {
        const response = await this.getEmployeesRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get trainers
     */
    async getTrainersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserAccountItem>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/trainers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserAccountItemFromJSON));
    }

    /**
     * Get trainers
     */
    async getTrainers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserAccountItem>> {
        const response = await this.getTrainersRaw(initOverrides);
        return await response.value();
    }

}
