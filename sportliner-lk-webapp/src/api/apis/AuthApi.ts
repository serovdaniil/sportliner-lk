/* tslint:disable */
/* eslint-disable */
/**
 * Sportliner-lk-endpoint-api
 * Sportliner LK Endpoint API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthChangePassword,
  AuthCredentials,
  AuthResponse,
  AuthenticationError,
} from '../models';
import {
    AuthChangePasswordFromJSON,
    AuthChangePasswordToJSON,
    AuthCredentialsFromJSON,
    AuthCredentialsToJSON,
    AuthResponseFromJSON,
    AuthResponseToJSON,
    AuthenticationErrorFromJSON,
    AuthenticationErrorToJSON,
} from '../models';

export interface LoginRequest {
    authCredentials: AuthCredentials;
}

export interface LoginWithChangePasswordRequest {
    authChangePassword: AuthChangePassword;
}

export interface LogoutRequest {
    automatic?: boolean;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Login into system
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters.authCredentials === null || requestParameters.authCredentials === undefined) {
            throw new runtime.RequiredError('authCredentials','Required parameter requestParameters.authCredentials was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthCredentialsToJSON(requestParameters.authCredentials),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * Login into system
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Change password
     */
    async loginWithChangePasswordRaw(requestParameters: LoginWithChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters.authChangePassword === null || requestParameters.authChangePassword === undefined) {
            throw new runtime.RequiredError('authChangePassword','Required parameter requestParameters.authChangePassword was null or undefined when calling loginWithChangePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login/changePassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthChangePasswordToJSON(requestParameters.authChangePassword),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * Change password
     */
    async loginWithChangePassword(requestParameters: LoginWithChangePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.loginWithChangePasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Logout from system
     */
    async logoutRaw(requestParameters: LogoutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters.automatic !== undefined) {
            queryParameters['automatic'] = requestParameters.automatic;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/auth/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Logout from system
     */
    async logout(requestParameters: LogoutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.logoutRaw(requestParameters, initOverrides);
    }

    /**
     * Refresh auth token
     */
    async refreshRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * Refresh auth token
     */
    async refresh(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthResponse> {
        const response = await this.refreshRaw(initOverrides);
        return await response.value();
    }

}
