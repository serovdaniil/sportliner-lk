/* tslint:disable */
/* eslint-disable */
/**
 * Sportliner-lk-endpoint-api
 * Sportliner LK Endpoint API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaymentSettings,
} from '../models';
import {
    PaymentSettingsFromJSON,
    PaymentSettingsToJSON,
} from '../models';

export interface UpdatePaymentSettingsRequest {
    paymentSettings: PaymentSettings;
}

/**
 * 
 */
export class SettingsApi extends runtime.BaseAPI {

    /**
     * Get payment settings
     */
    async getPaymentSettingsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaymentSettings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/settings/payment`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaymentSettingsFromJSON(jsonValue));
    }

    /**
     * Get payment settings
     */
    async getPaymentSettings(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaymentSettings> {
        const response = await this.getPaymentSettingsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update payment settings
     */
    async updatePaymentSettingsRaw(requestParameters: UpdatePaymentSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.paymentSettings === null || requestParameters.paymentSettings === undefined) {
            throw new runtime.RequiredError('paymentSettings','Required parameter requestParameters.paymentSettings was null or undefined when calling updatePaymentSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/settings/payment`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PaymentSettingsToJSON(requestParameters.paymentSettings),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update payment settings
     */
    async updatePaymentSettings(requestParameters: UpdatePaymentSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePaymentSettingsRaw(requestParameters, initOverrides);
    }

}
