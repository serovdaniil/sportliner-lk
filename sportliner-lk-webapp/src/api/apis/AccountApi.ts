/* tslint:disable */
/* eslint-disable */
/**
 * Sportliner-lk-endpoint-api
 * Sportliner LK Endpoint API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthChangePassword,
  ChildProfile,
  UserProfile,
} from '../models';
import {
    AuthChangePasswordFromJSON,
    AuthChangePasswordToJSON,
    ChildProfileFromJSON,
    ChildProfileToJSON,
    UserProfileFromJSON,
    UserProfileToJSON,
} from '../models';

export interface ChangeCurrentUserPasswordRequest {
    authChangePassword: AuthChangePassword;
}

export interface GetChildTargetAccountRequest {
    id: string;
}

export interface UpdateChildTargetAccountRequest {
    id: string;
    childProfile: ChildProfile;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * Change password
     */
    async changeCurrentUserPasswordRaw(requestParameters: ChangeCurrentUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authChangePassword === null || requestParameters.authChangePassword === undefined) {
            throw new runtime.RequiredError('authChangePassword','Required parameter requestParameters.authChangePassword was null or undefined when calling changeCurrentUserPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/account/password/change`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthChangePasswordToJSON(requestParameters.authChangePassword),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Change password
     */
    async changeCurrentUserPassword(requestParameters: ChangeCurrentUserPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.changeCurrentUserPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Get child of target user account
     */
    async getChildTargetAccountRaw(requestParameters: GetChildTargetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChildProfile>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getChildTargetAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/account/child/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChildProfileFromJSON(jsonValue));
    }

    /**
     * Get child of target user account
     */
    async getChildTargetAccount(requestParameters: GetChildTargetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChildProfile> {
        const response = await this.getChildTargetAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current user\'s profile info
     */
    async getCurrentUserProfileRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/account/profile`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     * Get current user\'s profile info
     */
    async getCurrentUserProfile(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfile> {
        const response = await this.getCurrentUserProfileRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update child of target user account
     */
    async updateChildTargetAccountRaw(requestParameters: UpdateChildTargetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateChildTargetAccount.');
        }

        if (requestParameters.childProfile === null || requestParameters.childProfile === undefined) {
            throw new runtime.RequiredError('childProfile','Required parameter requestParameters.childProfile was null or undefined when calling updateChildTargetAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/account/child/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ChildProfileToJSON(requestParameters.childProfile),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update child of target user account
     */
    async updateChildTargetAccount(requestParameters: UpdateChildTargetAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateChildTargetAccountRaw(requestParameters, initOverrides);
    }

}
